import json
import logging
from typing import Optional

from aiohttp import FormData, ClientSession
from fastapi import status, Request, UploadFile, HTTPException
from sqlalchemy.orm import Session

from src.core.jwt.tokens import verify_jwt_token
from src.core.repositories.users import UserRepository
from src.core.utils.config import settings
from src.core.schemas.tasks import ParseTasksResponse
from src.core.services.excel import ExcelService
from src.core.services.cache import CacheService
from src.core.utils.auth import verify_user_by_jwt

logger = logging.getLogger("tasks_logger")


class TaskService:
    @staticmethod
    async def get_all_tasks(
            request: Request,
            session: Session,
            day: int | None = None) -> ParseTasksResponse:
        logger.info(f"–ó–∞–ø—É—â–µ–Ω –º–µ—Ç–æ–¥ get_all_tasks(), day={day}")

        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ jwt-—Ç–æ–∫–µ–Ω–∞ –≤ get_all_tasks")
        await verify_user_by_jwt(request=request, session=session)
        logger.info(f"JWT-—Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω")

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞
        cached_data = CacheService.get_accumulated_data(day)

        if cached_data is not None:
            logger.info(f"–î–∞–Ω–Ω—ã–µ {'–∑–∞ –≤—Å–µ –¥–Ω–∏' if day is None else f'–∑–∞ –¥–Ω–∏ 1-{day}'} –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫–µ—à–∞.")
            return ParseTasksResponse(
                status=status.HTTP_200_OK,
                details=f"–î–∞–Ω–Ω—ã–µ {'–∑–∞ –≤—Å–µ –¥–Ω–∏' if day is None else f'–∑–∞ –¥–Ω–∏ 1-{day}'} –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫–µ—à–∞.",
                data=cached_data,
            )

        # –ï—Å–ª–∏ –≤ –∫–µ—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–∞—Ä—Å–∏–º Excel
        logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ Excel-—Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ ExcelService.parse_table(day={day})")
        excel_shop_df = await ExcelService.parse_table(request, day)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON
        json_data = excel_shop_df.to_json(orient="records")
        formatted_json_data = json.loads(json_data)

        if not formatted_json_data:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã",
            )

        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –∏ –∫–µ—à–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –æ—Ç–¥–µ–ª—å–Ω–æ
        if '–ù–æ–º–µ—Ä –¥–Ω—è' in excel_shop_df.columns:
            for day_num in range(1, 4): # –û—Ç 1 –¥–æ 3 –¥–Ω–µ–π
                day_data = excel_shop_df[excel_shop_df['–ù–æ–º–µ—Ä –¥–Ω—è'] == day_num]
                day_json = day_data.to_json(orient="records")
                CacheService.cache_day_data(day_num, json.loads(day_json))


        response = ParseTasksResponse(
            status=status.HTTP_200_OK,
            details="–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ Excel —Ñ–∞–π–ª–∞.",
            data=formatted_json_data,
        )

        logger.info("–ú–µ—Ç–æ–¥ get_all_tasks() –∑–∞–≤–µ—Ä—à—ë–Ω. –î–∞–Ω–Ω—ã–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É.")
        return response

    @staticmethod
    async def send_task_to_moderator(
            request: Request,
            session: Session,
            task_id: int,
            user_id: int,
            value: int,
            text: Optional[str] = None,
            file: Optional[UploadFile] = None
    ):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.

        –í–æ–∑–º–æ–∂–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
        - –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        - –§–æ—Ç–æ + —Ç–µ–∫—Å—Ç
        - –í–∏–¥–µ–æ + —Ç–µ–∫—Å—Ç
        """
        logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ jwt-—Ç–æ–∫–µ–Ω–∞ –≤ send_task_to_moderator")
        await verify_user_by_jwt(request=request, session=session)
        logger.info(f"JWT-—Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω")

        token = request.cookies.get("jwt-token")
        verified_token = verify_jwt_token(token)
        username = verified_token.get("sub")

        answers = {
            1: "https://t.me/c/2621459328/2",
            6: "https://t.me/c/2621459328/4",
            7: "https://t.me/c/2621459328/5",
            8: "https://t.me/c/2621459328/6",
            9: "https://t.me/c/2621459328/7",
            10: "https://t.me/c/2621459328/8",
            11: "https://t.me/c/2621459328/22",
            12: "https://t.me/c/2621459328/9",
            13: "https://t.me/c/2621459328/19",
            14: "https://t.me/c/2621459328/10",
            17: "https://t.me/c/2621459328/11",
            18: "https://t.me/c/2621459328/21",
            19: "https://t.me/c/2621459328/12",
            20: "https://t.me/c/2621459328/13",
            21: "https://t.me/c/2621459328/14",
            25: "https://t.me/c/2621459328/15",
            28: "https://t.me/c/2621459328/20",
            34: "https://t.me/c/2621459328/16",
            35: "https://t.me/c/2621459328/17",
            36: "https://t.me/c/2621459328/18",
        }

        if UserRepository.is_task_already_in_progress(session=session, task_id=task_id, username=username):
            return status.HTTP_200_OK

        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        if task_id not in answers:
            message = f"üìé –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id}\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n\nüí≤ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {value}"
        else:
            message = f"üìé –ó–∞–¥–∞–Ω–∏–µ ‚Ññ{task_id}\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n\nüí≤ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {value}\n\n–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç: {answers[task_id]}"

        if text and text.strip():
            message += f"\n\nüñã –¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {text}"

        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ")

        keyboard = {
            "inline_keyboard": [
                [{"text": "–ü—Ä–∏–Ω—è—Ç—å", "callback_data": f"approve_{task_id}_{user_id}_{value}"}],
                [{"text": "–û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"reject_{task_id}_{user_id}"}]
            ]
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        if file:
            # jpeg - –Ω–æ—Ä–º
            if "image" in file.content_type:
                url = f"https://api.telegram.org/bot{settings.bot.TELEGRAM_BOT_TOKEN}/sendPhoto"
                file_type = "photo"
            elif "video" in file.content_type:
                url = f"https://api.telegram.org/bot{settings.bot.TELEGRAM_BOT_TOKEN}/sendVideo"
                file_type = "video"
            else:
                logging.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {file.content_type}")
                raise HTTPException(status_code=400, detail="–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            form_data = FormData()
            form_data.add_field('chat_id', str(settings.bot.MODERATOR_CHAT_ID))
            form_data.add_field('caption', message)  # –û–ø–∏—Å–∞–Ω–∏–µ (–ø–æ–¥–ø–∏—Å—å)
            form_data.add_field('reply_markup', json.dumps(keyboard))
            form_data.add_field(file_type, file.file, filename=file.filename, content_type=file.content_type)

        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            url = f"https://api.telegram.org/bot{settings.bot.TELEGRAM_BOT_TOKEN}/sendMessage"

            payload = {
                "chat_id": str(settings.bot.MODERATOR_CHAT_ID),
                "text": message,
                "reply_markup": json.dumps(keyboard),
                "parse_mode": "HTML",
            }


        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        async with ClientSession() as client_session:
            if file:
                async with client_session.post(url, data=form_data) as response:
                    if response.status != 200:
                        error_text = await response.text()
                        logger.error(f"Failed to send task to moderator: {error_text}")
                        raise HTTPException(status_code=500, detail=f"Failed to send task to moderator: {error_text}")
            else:
                async with client_session.post(url, json=payload) as response:
                    if response.status != 200:
                        error_text = await response.text()
                        logger.error(f"Failed to send task to moderator: {error_text}")
                        raise HTTPException(status_code=500,
                                            detail=f"Failed to send text task to moderator: {error_text}")

        UserRepository.update_user_in_progress_tasks(session=session, username=username, task_id=task_id)

        return status.HTTP_200_OK
